// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SampleClient is the client API for Sample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	Time(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Sample_TimeClient, error)
}

type sampleClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleClient(cc grpc.ClientConnInterface) SampleClient {
	return &sampleClient{cc}
}

var sampleEchoStreamDesc = &grpc.StreamDesc{
	StreamName: "Echo",
}

func (c *sampleClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, "/Sample/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var sampleTimeStreamDesc = &grpc.StreamDesc{
	StreamName:    "Time",
	ServerStreams: true,
}

func (c *sampleClient) Time(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Sample_TimeClient, error) {
	stream, err := c.cc.NewStream(ctx, sampleTimeStreamDesc, "/Sample/Time", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sample_TimeClient interface {
	Recv() (*TimeMessage, error)
	grpc.ClientStream
}

type sampleTimeClient struct {
	grpc.ClientStream
}

func (x *sampleTimeClient) Recv() (*TimeMessage, error) {
	m := new(TimeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleService is the service API for Sample service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSampleService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SampleService struct {
	Echo func(context.Context, *EchoRequest) (*EchoReply, error)
	Time func(*empty.Empty, Sample_TimeServer) error
}

func (s *SampleService) echo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Sample/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SampleService) time(_ interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Time(m, &sampleTimeServer{stream})
}

type Sample_TimeServer interface {
	Send(*TimeMessage) error
	grpc.ServerStream
}

type sampleTimeServer struct {
	grpc.ServerStream
}

func (x *sampleTimeServer) Send(m *TimeMessage) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterSampleService registers a service implementation with a gRPC server.
func RegisterSampleService(s grpc.ServiceRegistrar, srv *SampleService) {
	srvCopy := *srv
	if srvCopy.Echo == nil {
		srvCopy.Echo = func(context.Context, *EchoRequest) (*EchoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
		}
	}
	if srvCopy.Time == nil {
		srvCopy.Time = func(*empty.Empty, Sample_TimeServer) error {
			return status.Errorf(codes.Unimplemented, "method Time not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Sample",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Echo",
				Handler:    srvCopy.echo,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Time",
				Handler:       srvCopy.time,
				ServerStreams: true,
			},
		},
		Metadata: "sample.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewSampleService creates a new SampleService containing the
// implemented methods of the Sample service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewSampleService(s interface{}) *SampleService {
	ns := &SampleService{}
	if h, ok := s.(interface {
		Echo(context.Context, *EchoRequest) (*EchoReply, error)
	}); ok {
		ns.Echo = h.Echo
	}
	if h, ok := s.(interface {
		Time(*empty.Empty, Sample_TimeServer) error
	}); ok {
		ns.Time = h.Time
	}
	return ns
}

// UnstableSampleService is the service API for Sample service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableSampleService interface {
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
	Time(*empty.Empty, Sample_TimeServer) error
}
